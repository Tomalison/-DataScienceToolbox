今天想跟大家聊的主題是「資料探勘與關聯分析」，資料探勘（Data Mining）是除了統計學與機器學習之外的資料模型。資料探勘的目的是從資料中找出有價值但不容易發掘的趨勢，也大量的使用機器學習中的演算法；所以可以把資料探勘視為是一種目的，而機器學習是實現這個目的的方法。

資料探勘與機器學習
資料探勘是一個跨學科的電腦科學分支 。 它是用人工智慧、機器學習、統計學和資料庫的交叉方法從相對較大型的資料集中發現模式的計算過程。 資料探勘過程的總體目標是從一個資料集中提取資訊，並將其轉換成可理解的結構，以進一步使用。因為源自於資料庫領域，也有人會用「資料庫知識發現（ KDD，Knowledge-Discovery in Databases） 」這個字描述資料探勘。


簡單來說，資料探勘的核心的目的有以下兩種：

「從資料中提取出隱含的過去未知的有價值的潛在資訊」
「一門從大量資料或者資料庫中提取有用資訊的科學」
一般來說，我們會用「價值性」和「隱藏性」衡量，價值性是指有實務上的可用性能創造出效益，而隱藏性代表找出來的資訊非顯而易見的且不易從資料表面觀察而來。

資料探勘是來自於資料庫系統的延伸，從資料庫到資料探勘的演進如下圖：


資料探勘包含以下常見算法：

分類分析（Classification）
群集分析（Clustering）
關聯分析（Association）
順序型態分析（Sequential Pattern Analysis）
時間序列分析（Time Series Forecasting）
其中分類與群集就是機器學習中的監督式與非監督式模型，順序型態分析和時間序列分析則是參考統計學當中的序列分析方法，關聯分析是在資料探勘領域中原生發展而來的。資料探勘是一種目的，而機器學習與統計學可以被視為是實現這個目的的方法。

使用 Python 實作資料探勘和關聯分析
資料探勘是從大量資料中自動擷取知識和模式的過程。它是一個多學科的領域，結合了數學、統計學、計算機科學和機器學習等領域的知識。Python 是一種廣泛使用的編程語言，有許多強大的套件可用於資料探勘和關聯分析。而關聯分析（又稱為購物籃分析）是數據探勘中的一個重要領域，其通過挖掘數據集中不同項目之間的關係，發現其中的規律性，並提供給商家和消費者進一步的思路和參考。


購物籃分析是關聯規則中典型的應用情境，目標是找出所有商品訂單中頻繁出現的資料組合（也就是很常一起被購買的商品組合）。如果你沒有聽過購物籃分析的話，建議你可以先閱讀這篇素材： 莫再提了！啤酒尿布是都市傳說 ← 必修教材。

載入資料集

假設某零售商店希望透過關聯分析找出顧客的消費模式，進而提高銷售額。

首先，我們需要將該零售商店的交易紀錄匯入 Python 環境中，並使用 Pandas 套件將資料進行清理。假設該資料集的欄位有「顧客 ID」、「購買日期」、「商品名稱」等欄位，我們可以使用以下程式碼來讀取該資料集：

import pandas as pd

data = {
    '顧客 ID': ['A', 'A', 'B', 'B', 'B', 'C', 'C', 'C', 'C', 'D', 'D', 'D', 'D', 'E', 'E', 'E', 'F', 'F', 'G', 'G'],
    '商品名稱': ['可樂', '洋芋片', '啤酒', '花生', '餅乾', '可樂', '洋芋片', '花生', '餅乾', '可樂', '啤酒', '花生', '餅乾', '可樂', '啤酒', '餅乾', '可樂', '花生', '啤酒', '餅乾'],
    '購買日期': ['2022/01/01', '2022/01/01', '2022/01/02', '2022/01/02', '2022/01/02', '2022/01/03', '2022/01/03', '2022/01/03', '2022/01/03', '2022/01/04', '2022/01/04', '2022/01/04', '2022/01/04', '2022/01/05', '2022/01/05', '2022/01/05', '2022/01/06', '2022/01/06', '2022/01/07', '2022/01/07']
}

df = pd.DataFrame(data)
接著，我們可以使用 Pandas 的 groupby() 函式將資料集按照顧客 ID 及商品名稱進行分組，以便後續進行關聯分析：

# 將資料集按照顧客 ID 及商品名稱進行分組
grouped = df.groupby(['顧客 ID', '商品名稱'])['購買日期'].count().reset_index()
關聯分析

接著，我們可以使用 Apriori 演算法進行關聯分析，並找出顧客購買商品的模式。假設我們希望找出支持度 (support) 大於 0.2，信賴度 (confidence) 大於 0.5 的商品組合，我們可以使用以下程式碼進行分析：

from mlxtend.frequent_patterns import apriori
from mlxtend.frequent_patterns import association_rules

# 將資料集轉換成 one-hot 編碼
hot_encoded = grouped.pivot(index='顧客 ID', columns='商品名稱', values='購買日期').fillna(0)

# 進行 Apriori 演算法分析
frequent_itemsets = apriori(hot_encoded, min_support=0.2, use_colnames=True)
rules = association_rules(frequent_itemsets, metric='confidence', min_threshold=0.5)

# 按照信賴度排序並輸出結果
rules.sort_values('confidence', ascending=False, inplace=True)
print(rules[['antecedents', 'consequents', 'support', 'confidence']])
這裡我們主要使用的是 mlxtend 套件，若你的環境出現 ModuleNotFoundError 的話，記得先利用 pip 的方式進行安裝。



最後，輸出的結果會是以下內容，表示出現「啤酒」的時候也很可能會出現「餅乾」（support 值 = 0.57、confidence = 1）：

   antecedents consequents   support  confidence
9         (啤酒)        (餅乾)  0.571429    1.000000
21    (花生, 啤酒)        (餅乾)  0.285714    1.000000
13    (可樂, 啤酒)        (餅乾)  0.285714    1.000000
1        (洋芋片)        (可樂)  0.285714    1.000000
8         (餅乾)        (啤酒)  0.571429    0.800000
10        (花生)        (餅乾)  0.428571    0.750000
3         (花生)        (可樂)  0.428571    0.750000
...
透過以上的分析，我們可以得知哪些商品組合的購買量較高，進而透過行銷手段提高這些商品的銷售額。

Support 與 Confidence 值

在關聯分析中，support 和 confidence 是兩個重要的指標，用於評估兩個商品（或商品組合）之間的關係。它們是關聯規則的度量標準。

Support（支持度）：指資料集中包含該商品（或商品組合）的交易次數與總交易次數之比。簡單來說，就是該商品（或商品組合）在所有交易中的出現頻率。例如，如果一個商品組合在所有交易中出現了 10 次，而總交易次數為 100 次，則該商品組合的支持度為 0.1，即 10/100。
Confidence（置信度）：指包含前提的交易也包含結論的交易所佔的比例。簡單來說，就是購買了前提商品（或商品組合）的交易中，也購買了結論商品（或商品組合）的交易占比。例如，在所有購買了商品 A 的交易中，有 60% 的交易也購買了商品 B，則商品 A 和商品 B 的置信度為 0.6。
支持度衡量了一個商品組合的普遍程度，而置信度衡量了前提和結論之間的關聯程度。根據支持度和置信度，可以生成關聯規則，並按照支持度、置信度等指標進行排序和篩選。通常，支持度和置信度的值越高，說明關聯關係越強，規則越可信。

延伸閱讀
在這個單元主要會採用到的工具是 mlxtend 套件，以下是我們挑選了一些延伸的閱讀素材：

Frequent itemsets via the Apriori algorithm ← 必修教材
Association rules generation from frequent itemsets ← 必修教材
挖掘關聯規則(Mining Association Rules) ← 選修教材
